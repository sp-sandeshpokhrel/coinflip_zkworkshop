import credits.aleo;
import token_registry.aleo;
program coinflip_aleo_zkworkshop_v1.aleo;

struct TokenMetadata:
    token_id as field;
    name as u128;
    symbol as u128;
    decimals as u8;
    supply as u128;
    max_supply as u128;
    admin as address;
    external_authorization_required as boolean;
    external_authorization_party as address;

struct TokenOwner:
    account as address;
    token_id as field;

struct Balance:
    token_id as field;
    account as address;
    balance as u128;
    authorized_until as u32;

mapping amount_limit:
    key as boolean.public;
    value as u64.public;

mapping admin:
    key as boolean.public;
    value as address.public;

mapping status:
    key as boolean.public;
    value as u8.public;

mapping user_balance:
    key as field.public;
    value as u64.public;

mapping user_streak:
    key as field.public;
    value as [boolean; 5u32].public;

function initialize:
    input r0 as address.private;
    input r1 as u64.private;
    gt r1 0u64 into r2;
    assert.eq r2 true;
    async initialize r0 r1 into r3;
    output r3 as coinflip_aleo_zkworkshop_v1.aleo/initialize.future;

finalize initialize:
    input r0 as address.public;
    input r1 as u64.public;
    contains admin[true] into r2;
    not r2 into r3;
    assert.eq r3 true;
    set r0 into admin[true];
    set r1 into amount_limit[true];
    set 0u8 into status[true];

function bet_public_native:
    input r0 as [u64; 5u32].private;
    input r1 as [boolean; 5u32].private;
    add 0u64 r0[0u32] into r2;
    add r2 r0[1u32] into r3;
    add r3 r0[2u32] into r4;
    add r4 r0[3u32] into r5;
    add r5 r0[4u32] into r6;
    call credits.aleo/transfer_public_as_signer coinflip_aleo_zkworkshop_v1.aleo r6 into r7;
    async bet_public_native self.caller r6 r0 r1 11111111111111111111field r7 into r8;
    output r8 as coinflip_aleo_zkworkshop_v1.aleo/bet_public_native.future;

finalize bet_public_native:
    input r0 as address.public;
    input r1 as u64.public;
    input r2 as [u64; 5u32].public;
    input r3 as [boolean; 5u32].public;
    input r4 as field.public;
    input r5 as credits.aleo/transfer_public_as_signer.future;
    await r5;
    get status[true] into r6;
    assert.eq r6 1u8;
    get amount_limit[true] into r7;
    lte r1 r7 into r8;
    assert.eq r8 true;
    get credits.aleo/account[coinflip_aleo_zkworkshop_v1.aleo] into r9;
    mul r1 2u64 into r10;
    gte r9 r10 into r11;
    assert.eq r11 true;
    cast r0 r4 into r12 as TokenOwner;
    hash.bhp256 r12 into r13 as field;
    rand.chacha into r14 as boolean;
    rand.chacha into r15 as boolean;
    rand.chacha into r16 as boolean;
    rand.chacha into r17 as boolean;
    rand.chacha into r18 as boolean;
    cast  r14 r15 r16 r17 r18 into r19 as [boolean; 5u32];
    gt r2[0u32] 0u64 into r20;
    is.eq r19[0u32] r3[0u32] into r21;
    mul r2[0u32] 2u64 into r22;
    add 0u64 r22 into r23;
    is.eq 0u8 0u8 into r24;
    not r24 into r25;
    is.eq 0u8 1u8 into r26;
    not r26 into r27;
    is.eq 0u8 2u8 into r28;
    not r28 into r29;
    is.eq 0u8 3u8 into r30;
    not r30 into r31;
    is.eq 0u8 4u8 into r32;
    ternary r32 true false into r33;
    ternary r30 true false into r34;
    ternary r30 false r33 into r35;
    ternary r28 true false into r36;
    ternary r28 false r34 into r37;
    ternary r28 false r35 into r38;
    ternary r26 true false into r39;
    ternary r26 false r36 into r40;
    ternary r26 false r37 into r41;
    ternary r26 false r38 into r42;
    ternary r24 true false into r43;
    ternary r24 false r39 into r44;
    ternary r24 false r40 into r45;
    ternary r24 false r41 into r46;
    ternary r24 false r42 into r47;
    ternary r21 r23 0u64 into r48;
    ternary r21 r43 false into r49;
    ternary r21 r44 false into r50;
    ternary r21 r45 false into r51;
    ternary r21 r46 false into r52;
    ternary r21 r47 false into r53;
    ternary r20 r48 0u64 into r54;
    ternary r20 r49 false into r55;
    ternary r20 r50 false into r56;
    ternary r20 r51 false into r57;
    ternary r20 r52 false into r58;
    ternary r20 r53 false into r59;
    gt r2[1u32] 0u64 into r60;
    is.eq r19[1u32] r3[1u32] into r61;
    mul r2[1u32] 2u64 into r62;
    add r54 r62 into r63;
    is.eq 1u8 0u8 into r64;
    not r64 into r65;
    is.eq 1u8 1u8 into r66;
    not r66 into r67;
    is.eq 1u8 2u8 into r68;
    not r68 into r69;
    is.eq 1u8 3u8 into r70;
    not r70 into r71;
    is.eq 1u8 4u8 into r72;
    ternary r72 true r59 into r73;
    ternary r70 true r58 into r74;
    ternary r70 r59 r73 into r75;
    ternary r68 true r57 into r76;
    ternary r68 r58 r74 into r77;
    ternary r68 r59 r75 into r78;
    ternary r66 true r56 into r79;
    ternary r66 r57 r76 into r80;
    ternary r66 r58 r77 into r81;
    ternary r66 r59 r78 into r82;
    ternary r64 true r55 into r83;
    ternary r64 r56 r79 into r84;
    ternary r64 r57 r80 into r85;
    ternary r64 r58 r81 into r86;
    ternary r64 r59 r82 into r87;
    ternary r61 r63 r54 into r88;
    ternary r61 r83 r55 into r89;
    ternary r61 r84 r56 into r90;
    ternary r61 r85 r57 into r91;
    ternary r61 r86 r58 into r92;
    ternary r61 r87 r59 into r93;
    ternary r60 r88 r54 into r94;
    ternary r60 r89 r55 into r95;
    ternary r60 r90 r56 into r96;
    ternary r60 r91 r57 into r97;
    ternary r60 r92 r58 into r98;
    ternary r60 r93 r59 into r99;
    gt r2[2u32] 0u64 into r100;
    is.eq r19[2u32] r3[2u32] into r101;
    mul r2[2u32] 2u64 into r102;
    add r94 r102 into r103;
    is.eq 2u8 0u8 into r104;
    not r104 into r105;
    is.eq 2u8 1u8 into r106;
    not r106 into r107;
    is.eq 2u8 2u8 into r108;
    not r108 into r109;
    is.eq 2u8 3u8 into r110;
    not r110 into r111;
    is.eq 2u8 4u8 into r112;
    ternary r112 true r99 into r113;
    ternary r110 true r98 into r114;
    ternary r110 r99 r113 into r115;
    ternary r108 true r97 into r116;
    ternary r108 r98 r114 into r117;
    ternary r108 r99 r115 into r118;
    ternary r106 true r96 into r119;
    ternary r106 r97 r116 into r120;
    ternary r106 r98 r117 into r121;
    ternary r106 r99 r118 into r122;
    ternary r104 true r95 into r123;
    ternary r104 r96 r119 into r124;
    ternary r104 r97 r120 into r125;
    ternary r104 r98 r121 into r126;
    ternary r104 r99 r122 into r127;
    ternary r101 r103 r94 into r128;
    ternary r101 r123 r95 into r129;
    ternary r101 r124 r96 into r130;
    ternary r101 r125 r97 into r131;
    ternary r101 r126 r98 into r132;
    ternary r101 r127 r99 into r133;
    ternary r100 r128 r94 into r134;
    ternary r100 r129 r95 into r135;
    ternary r100 r130 r96 into r136;
    ternary r100 r131 r97 into r137;
    ternary r100 r132 r98 into r138;
    ternary r100 r133 r99 into r139;
    gt r2[3u32] 0u64 into r140;
    is.eq r19[3u32] r3[3u32] into r141;
    mul r2[3u32] 2u64 into r142;
    add r134 r142 into r143;
    is.eq 3u8 0u8 into r144;
    not r144 into r145;
    is.eq 3u8 1u8 into r146;
    not r146 into r147;
    is.eq 3u8 2u8 into r148;
    not r148 into r149;
    is.eq 3u8 3u8 into r150;
    not r150 into r151;
    is.eq 3u8 4u8 into r152;
    ternary r152 true r139 into r153;
    ternary r150 true r138 into r154;
    ternary r150 r139 r153 into r155;
    ternary r148 true r137 into r156;
    ternary r148 r138 r154 into r157;
    ternary r148 r139 r155 into r158;
    ternary r146 true r136 into r159;
    ternary r146 r137 r156 into r160;
    ternary r146 r138 r157 into r161;
    ternary r146 r139 r158 into r162;
    ternary r144 true r135 into r163;
    ternary r144 r136 r159 into r164;
    ternary r144 r137 r160 into r165;
    ternary r144 r138 r161 into r166;
    ternary r144 r139 r162 into r167;
    ternary r141 r143 r134 into r168;
    ternary r141 r163 r135 into r169;
    ternary r141 r164 r136 into r170;
    ternary r141 r165 r137 into r171;
    ternary r141 r166 r138 into r172;
    ternary r141 r167 r139 into r173;
    ternary r140 r168 r134 into r174;
    ternary r140 r169 r135 into r175;
    ternary r140 r170 r136 into r176;
    ternary r140 r171 r137 into r177;
    ternary r140 r172 r138 into r178;
    ternary r140 r173 r139 into r179;
    gt r2[4u32] 0u64 into r180;
    is.eq r19[4u32] r3[4u32] into r181;
    mul r2[4u32] 2u64 into r182;
    add r174 r182 into r183;
    is.eq 4u8 0u8 into r184;
    not r184 into r185;
    is.eq 4u8 1u8 into r186;
    not r186 into r187;
    is.eq 4u8 2u8 into r188;
    not r188 into r189;
    is.eq 4u8 3u8 into r190;
    not r190 into r191;
    is.eq 4u8 4u8 into r192;
    ternary r192 true r179 into r193;
    ternary r190 true r178 into r194;
    ternary r190 r179 r193 into r195;
    ternary r188 true r177 into r196;
    ternary r188 r178 r194 into r197;
    ternary r188 r179 r195 into r198;
    ternary r186 true r176 into r199;
    ternary r186 r177 r196 into r200;
    ternary r186 r178 r197 into r201;
    ternary r186 r179 r198 into r202;
    ternary r184 true r175 into r203;
    ternary r184 r176 r199 into r204;
    ternary r184 r177 r200 into r205;
    ternary r184 r178 r201 into r206;
    ternary r184 r179 r202 into r207;
    ternary r181 r183 r174 into r208;
    ternary r181 r203 r175 into r209;
    ternary r181 r204 r176 into r210;
    ternary r181 r205 r177 into r211;
    ternary r181 r206 r178 into r212;
    ternary r181 r207 r179 into r213;
    ternary r180 r208 r174 into r214;
    ternary r180 r209 r175 into r215;
    ternary r180 r210 r176 into r216;
    ternary r180 r211 r177 into r217;
    ternary r180 r212 r178 into r218;
    ternary r180 r213 r179 into r219;
    cast  r215 r216 r217 r218 r219 into r220 as [boolean; 5u32];
    get.or_use user_balance[r13] 0u64 into r221;
    add r221 r214 into r222;
    set r222 into user_balance[r13];
    set r220 into user_streak[r13];

function bet_private_native:
    input r0 as credits.aleo/credits.record;
    input r1 as [u64; 5u32].private;
    input r2 as [boolean; 5u32].private;
    add 0u64 r1[0u32] into r3;
    add r3 r1[1u32] into r4;
    add r4 r1[2u32] into r5;
    add r5 r1[3u32] into r6;
    add r6 r1[4u32] into r7;
    call credits.aleo/transfer_private_to_public r0 coinflip_aleo_zkworkshop_v1.aleo r7 into r8 r9;
    cast self.caller 11111111111111111111field into r10 as TokenOwner;
    hash.bhp256 r10 into r11 as field;
    async bet_private_native r11 r7 r1 r2 r9 into r12;
    output r8 as credits.aleo/credits.record;
    output r12 as coinflip_aleo_zkworkshop_v1.aleo/bet_private_native.future;

finalize bet_private_native:
    input r0 as field.public;
    input r1 as u64.public;
    input r2 as [u64; 5u32].public;
    input r3 as [boolean; 5u32].public;
    input r4 as credits.aleo/transfer_private_to_public.future;
    await r4;
    get status[true] into r5;
    assert.eq r5 1u8;
    get amount_limit[true] into r6;
    lte r1 r6 into r7;
    assert.eq r7 true;
    get credits.aleo/account[coinflip_aleo_zkworkshop_v1.aleo] into r8;
    mul r1 2u64 into r9;
    gte r8 r9 into r10;
    assert.eq r10 true;
    rand.chacha into r11 as boolean;
    rand.chacha into r12 as boolean;
    rand.chacha into r13 as boolean;
    rand.chacha into r14 as boolean;
    rand.chacha into r15 as boolean;
    cast  r11 r12 r13 r14 r15 into r16 as [boolean; 5u32];
    gt r2[0u32] 0u64 into r17;
    is.eq r16[0u32] r3[0u32] into r18;
    mul r2[0u32] 2u64 into r19;
    add 0u64 r19 into r20;
    is.eq 0u8 0u8 into r21;
    not r21 into r22;
    is.eq 0u8 1u8 into r23;
    not r23 into r24;
    is.eq 0u8 2u8 into r25;
    not r25 into r26;
    is.eq 0u8 3u8 into r27;
    not r27 into r28;
    is.eq 0u8 4u8 into r29;
    ternary r29 true false into r30;
    ternary r27 true false into r31;
    ternary r27 false r30 into r32;
    ternary r25 true false into r33;
    ternary r25 false r31 into r34;
    ternary r25 false r32 into r35;
    ternary r23 true false into r36;
    ternary r23 false r33 into r37;
    ternary r23 false r34 into r38;
    ternary r23 false r35 into r39;
    ternary r21 true false into r40;
    ternary r21 false r36 into r41;
    ternary r21 false r37 into r42;
    ternary r21 false r38 into r43;
    ternary r21 false r39 into r44;
    ternary r18 r20 0u64 into r45;
    ternary r18 r40 false into r46;
    ternary r18 r41 false into r47;
    ternary r18 r42 false into r48;
    ternary r18 r43 false into r49;
    ternary r18 r44 false into r50;
    ternary r17 r45 0u64 into r51;
    ternary r17 r46 false into r52;
    ternary r17 r47 false into r53;
    ternary r17 r48 false into r54;
    ternary r17 r49 false into r55;
    ternary r17 r50 false into r56;
    gt r2[1u32] 0u64 into r57;
    is.eq r16[1u32] r3[1u32] into r58;
    mul r2[1u32] 2u64 into r59;
    add r51 r59 into r60;
    is.eq 1u8 0u8 into r61;
    not r61 into r62;
    is.eq 1u8 1u8 into r63;
    not r63 into r64;
    is.eq 1u8 2u8 into r65;
    not r65 into r66;
    is.eq 1u8 3u8 into r67;
    not r67 into r68;
    is.eq 1u8 4u8 into r69;
    ternary r69 true r56 into r70;
    ternary r67 true r55 into r71;
    ternary r67 r56 r70 into r72;
    ternary r65 true r54 into r73;
    ternary r65 r55 r71 into r74;
    ternary r65 r56 r72 into r75;
    ternary r63 true r53 into r76;
    ternary r63 r54 r73 into r77;
    ternary r63 r55 r74 into r78;
    ternary r63 r56 r75 into r79;
    ternary r61 true r52 into r80;
    ternary r61 r53 r76 into r81;
    ternary r61 r54 r77 into r82;
    ternary r61 r55 r78 into r83;
    ternary r61 r56 r79 into r84;
    ternary r58 r60 r51 into r85;
    ternary r58 r80 r52 into r86;
    ternary r58 r81 r53 into r87;
    ternary r58 r82 r54 into r88;
    ternary r58 r83 r55 into r89;
    ternary r58 r84 r56 into r90;
    ternary r57 r85 r51 into r91;
    ternary r57 r86 r52 into r92;
    ternary r57 r87 r53 into r93;
    ternary r57 r88 r54 into r94;
    ternary r57 r89 r55 into r95;
    ternary r57 r90 r56 into r96;
    gt r2[2u32] 0u64 into r97;
    is.eq r16[2u32] r3[2u32] into r98;
    mul r2[2u32] 2u64 into r99;
    add r91 r99 into r100;
    is.eq 2u8 0u8 into r101;
    not r101 into r102;
    is.eq 2u8 1u8 into r103;
    not r103 into r104;
    is.eq 2u8 2u8 into r105;
    not r105 into r106;
    is.eq 2u8 3u8 into r107;
    not r107 into r108;
    is.eq 2u8 4u8 into r109;
    ternary r109 true r96 into r110;
    ternary r107 true r95 into r111;
    ternary r107 r96 r110 into r112;
    ternary r105 true r94 into r113;
    ternary r105 r95 r111 into r114;
    ternary r105 r96 r112 into r115;
    ternary r103 true r93 into r116;
    ternary r103 r94 r113 into r117;
    ternary r103 r95 r114 into r118;
    ternary r103 r96 r115 into r119;
    ternary r101 true r92 into r120;
    ternary r101 r93 r116 into r121;
    ternary r101 r94 r117 into r122;
    ternary r101 r95 r118 into r123;
    ternary r101 r96 r119 into r124;
    ternary r98 r100 r91 into r125;
    ternary r98 r120 r92 into r126;
    ternary r98 r121 r93 into r127;
    ternary r98 r122 r94 into r128;
    ternary r98 r123 r95 into r129;
    ternary r98 r124 r96 into r130;
    ternary r97 r125 r91 into r131;
    ternary r97 r126 r92 into r132;
    ternary r97 r127 r93 into r133;
    ternary r97 r128 r94 into r134;
    ternary r97 r129 r95 into r135;
    ternary r97 r130 r96 into r136;
    gt r2[3u32] 0u64 into r137;
    is.eq r16[3u32] r3[3u32] into r138;
    mul r2[3u32] 2u64 into r139;
    add r131 r139 into r140;
    is.eq 3u8 0u8 into r141;
    not r141 into r142;
    is.eq 3u8 1u8 into r143;
    not r143 into r144;
    is.eq 3u8 2u8 into r145;
    not r145 into r146;
    is.eq 3u8 3u8 into r147;
    not r147 into r148;
    is.eq 3u8 4u8 into r149;
    ternary r149 true r136 into r150;
    ternary r147 true r135 into r151;
    ternary r147 r136 r150 into r152;
    ternary r145 true r134 into r153;
    ternary r145 r135 r151 into r154;
    ternary r145 r136 r152 into r155;
    ternary r143 true r133 into r156;
    ternary r143 r134 r153 into r157;
    ternary r143 r135 r154 into r158;
    ternary r143 r136 r155 into r159;
    ternary r141 true r132 into r160;
    ternary r141 r133 r156 into r161;
    ternary r141 r134 r157 into r162;
    ternary r141 r135 r158 into r163;
    ternary r141 r136 r159 into r164;
    ternary r138 r140 r131 into r165;
    ternary r138 r160 r132 into r166;
    ternary r138 r161 r133 into r167;
    ternary r138 r162 r134 into r168;
    ternary r138 r163 r135 into r169;
    ternary r138 r164 r136 into r170;
    ternary r137 r165 r131 into r171;
    ternary r137 r166 r132 into r172;
    ternary r137 r167 r133 into r173;
    ternary r137 r168 r134 into r174;
    ternary r137 r169 r135 into r175;
    ternary r137 r170 r136 into r176;
    gt r2[4u32] 0u64 into r177;
    is.eq r16[4u32] r3[4u32] into r178;
    mul r2[4u32] 2u64 into r179;
    add r171 r179 into r180;
    is.eq 4u8 0u8 into r181;
    not r181 into r182;
    is.eq 4u8 1u8 into r183;
    not r183 into r184;
    is.eq 4u8 2u8 into r185;
    not r185 into r186;
    is.eq 4u8 3u8 into r187;
    not r187 into r188;
    is.eq 4u8 4u8 into r189;
    ternary r189 true r176 into r190;
    ternary r187 true r175 into r191;
    ternary r187 r176 r190 into r192;
    ternary r185 true r174 into r193;
    ternary r185 r175 r191 into r194;
    ternary r185 r176 r192 into r195;
    ternary r183 true r173 into r196;
    ternary r183 r174 r193 into r197;
    ternary r183 r175 r194 into r198;
    ternary r183 r176 r195 into r199;
    ternary r181 true r172 into r200;
    ternary r181 r173 r196 into r201;
    ternary r181 r174 r197 into r202;
    ternary r181 r175 r198 into r203;
    ternary r181 r176 r199 into r204;
    ternary r178 r180 r171 into r205;
    ternary r178 r200 r172 into r206;
    ternary r178 r201 r173 into r207;
    ternary r178 r202 r174 into r208;
    ternary r178 r203 r175 into r209;
    ternary r178 r204 r176 into r210;
    ternary r177 r205 r171 into r211;
    ternary r177 r206 r172 into r212;
    ternary r177 r207 r173 into r213;
    ternary r177 r208 r174 into r214;
    ternary r177 r209 r175 into r215;
    ternary r177 r210 r176 into r216;
    cast  r212 r213 r214 r215 r216 into r217 as [boolean; 5u32];
    get.or_use user_balance[r0] 0u64 into r218;
    add r218 r211 into r219;
    set r219 into user_balance[r0];
    set r217 into user_streak[r0];

function public_claim_native:
    input r0 as u64.private;
    input r1 as field.private;
    gt r0 0u64 into r2;
    assert.eq r2 true;
    call credits.aleo/transfer_public self.caller r0 into r3;
    async public_claim_native r3 self.caller r0 r1 into r4;
    output r4 as coinflip_aleo_zkworkshop_v1.aleo/public_claim_native.future;

finalize public_claim_native:
    input r0 as credits.aleo/transfer_public.future;
    input r1 as address.public;
    input r2 as u64.public;
    input r3 as field.public;
    await r0;
    get status[true] into r4;
    assert.eq r4 1u8;
    cast r1 r3 into r5 as TokenOwner;
    hash.bhp256 r5 into r6 as field;
    get user_balance[r6] into r7;
    gte r7 r2 into r8;
    assert.eq r8 true;
    get.or_use user_balance[r6] 0u64 into r9;
    sub r9 r2 into r10;
    set r10 into user_balance[r6];

function public_claim_token:
    input r0 as u64.private;
    input r1 as field.private;
    gt r0 0u64 into r2;
    assert.eq r2 true;
    cast r0 into r3 as u128;
    call token_registry.aleo/transfer_public r1 self.caller r3 into r4;
    async public_claim_token r4 self.caller r0 r1 into r5;
    output r5 as coinflip_aleo_zkworkshop_v1.aleo/public_claim_token.future;

finalize public_claim_token:
    input r0 as token_registry.aleo/transfer_public.future;
    input r1 as address.public;
    input r2 as u64.public;
    input r3 as field.public;
    await r0;
    get status[true] into r4;
    assert.eq r4 1u8;
    cast r1 r3 into r5 as TokenOwner;
    hash.bhp256 r5 into r6 as field;
    get user_balance[r6] into r7;
    gte r7 r2 into r8;
    assert.eq r8 true;
    get.or_use user_balance[r6] 0u64 into r9;
    sub r9 r2 into r10;
    set r10 into user_balance[r6];

function private_claim_native:
    input r0 as u64.private;
    gt r0 0u64 into r1;
    assert.eq r1 true;
    call credits.aleo/transfer_public_to_private self.caller r0 into r2 r3;
    cast self.caller 11111111111111111111field into r4 as TokenOwner;
    hash.bhp256 r4 into r5 as field;
    async private_claim_native r3 r5 r0 into r6;
    output r2 as credits.aleo/credits.record;
    output r6 as coinflip_aleo_zkworkshop_v1.aleo/private_claim_native.future;

finalize private_claim_native:
    input r0 as credits.aleo/transfer_public_to_private.future;
    input r1 as field.public;
    input r2 as u64.public;
    await r0;
    get status[true] into r3;
    assert.eq r3 1u8;
    get user_balance[r1] into r4;
    gte r4 r2 into r5;
    assert.eq r5 true;
    get.or_use user_balance[r1] 0u64 into r6;
    sub r6 r2 into r7;
    set r7 into user_balance[r1];

function private_claim_token:
    input r0 as u64.private;
    input r1 as field.private;
    gt r0 0u64 into r2;
    assert.eq r2 true;
    cast r0 into r3 as u128;
    call token_registry.aleo/transfer_public_to_private r1 self.caller r3 false into r4 r5;
    cast self.caller r1 into r6 as TokenOwner;
    hash.bhp256 r6 into r7 as field;
    async private_claim_token r5 r7 r0 into r8;
    output r4 as token_registry.aleo/Token.record;
    output r8 as coinflip_aleo_zkworkshop_v1.aleo/private_claim_token.future;

finalize private_claim_token:
    input r0 as token_registry.aleo/transfer_public_to_private.future;
    input r1 as field.public;
    input r2 as u64.public;
    await r0;
    get status[true] into r3;
    assert.eq r3 1u8;
    get user_balance[r1] into r4;
    gte r4 r2 into r5;
    assert.eq r5 true;
    get.or_use user_balance[r1] 0u64 into r6;
    sub r6 r2 into r7;
    set r7 into user_balance[r1];

function bet_public_token:
    input r0 as [u64; 5u32].private;
    input r1 as [boolean; 5u32].private;
    input r2 as field.private;
    add 0u64 r0[0u32] into r3;
    add r3 r0[1u32] into r4;
    add r4 r0[2u32] into r5;
    add r5 r0[3u32] into r6;
    add r6 r0[4u32] into r7;
    cast r7 into r8 as u128;
    call token_registry.aleo/transfer_public_as_signer r2 coinflip_aleo_zkworkshop_v1.aleo r8 into r9;
    async bet_public_token self.caller r7 r0 r1 r2 r9 into r10;
    output r10 as coinflip_aleo_zkworkshop_v1.aleo/bet_public_token.future;

finalize bet_public_token:
    input r0 as address.public;
    input r1 as u64.public;
    input r2 as [u64; 5u32].public;
    input r3 as [boolean; 5u32].public;
    input r4 as field.public;
    input r5 as token_registry.aleo/transfer_public_as_signer.future;
    await r5;
    get status[true] into r6;
    assert.eq r6 1u8;
    get amount_limit[true] into r7;
    lte r1 r7 into r8;
    assert.eq r8 true;
    cast coinflip_aleo_zkworkshop_v1.aleo r4 into r9 as TokenOwner;
    hash.bhp256 r9 into r10 as field;
    get token_registry.aleo/authorized_balances[r10] into r11;
    cast r1 into r12 as u128;
    mul r12 2u128 into r13;
    gte r11.balance r13 into r14;
    assert.eq r14 true;
    cast r0 r4 into r15 as TokenOwner;
    hash.bhp256 r15 into r16 as field;
    rand.chacha into r17 as boolean;
    rand.chacha into r18 as boolean;
    rand.chacha into r19 as boolean;
    rand.chacha into r20 as boolean;
    rand.chacha into r21 as boolean;
    cast  r17 r18 r19 r20 r21 into r22 as [boolean; 5u32];
    gt r2[0u32] 0u64 into r23;
    is.eq r22[0u32] r3[0u32] into r24;
    mul r2[0u32] 2u64 into r25;
    add 0u64 r25 into r26;
    is.eq 0u8 0u8 into r27;
    not r27 into r28;
    is.eq 0u8 1u8 into r29;
    not r29 into r30;
    is.eq 0u8 2u8 into r31;
    not r31 into r32;
    is.eq 0u8 3u8 into r33;
    not r33 into r34;
    is.eq 0u8 4u8 into r35;
    ternary r35 true false into r36;
    ternary r33 true false into r37;
    ternary r33 false r36 into r38;
    ternary r31 true false into r39;
    ternary r31 false r37 into r40;
    ternary r31 false r38 into r41;
    ternary r29 true false into r42;
    ternary r29 false r39 into r43;
    ternary r29 false r40 into r44;
    ternary r29 false r41 into r45;
    ternary r27 true false into r46;
    ternary r27 false r42 into r47;
    ternary r27 false r43 into r48;
    ternary r27 false r44 into r49;
    ternary r27 false r45 into r50;
    ternary r24 r26 0u64 into r51;
    ternary r24 r46 false into r52;
    ternary r24 r47 false into r53;
    ternary r24 r48 false into r54;
    ternary r24 r49 false into r55;
    ternary r24 r50 false into r56;
    ternary r23 r51 0u64 into r57;
    ternary r23 r52 false into r58;
    ternary r23 r53 false into r59;
    ternary r23 r54 false into r60;
    ternary r23 r55 false into r61;
    ternary r23 r56 false into r62;
    gt r2[1u32] 0u64 into r63;
    is.eq r22[1u32] r3[1u32] into r64;
    mul r2[1u32] 2u64 into r65;
    add r57 r65 into r66;
    is.eq 1u8 0u8 into r67;
    not r67 into r68;
    is.eq 1u8 1u8 into r69;
    not r69 into r70;
    is.eq 1u8 2u8 into r71;
    not r71 into r72;
    is.eq 1u8 3u8 into r73;
    not r73 into r74;
    is.eq 1u8 4u8 into r75;
    ternary r75 true r62 into r76;
    ternary r73 true r61 into r77;
    ternary r73 r62 r76 into r78;
    ternary r71 true r60 into r79;
    ternary r71 r61 r77 into r80;
    ternary r71 r62 r78 into r81;
    ternary r69 true r59 into r82;
    ternary r69 r60 r79 into r83;
    ternary r69 r61 r80 into r84;
    ternary r69 r62 r81 into r85;
    ternary r67 true r58 into r86;
    ternary r67 r59 r82 into r87;
    ternary r67 r60 r83 into r88;
    ternary r67 r61 r84 into r89;
    ternary r67 r62 r85 into r90;
    ternary r64 r66 r57 into r91;
    ternary r64 r86 r58 into r92;
    ternary r64 r87 r59 into r93;
    ternary r64 r88 r60 into r94;
    ternary r64 r89 r61 into r95;
    ternary r64 r90 r62 into r96;
    ternary r63 r91 r57 into r97;
    ternary r63 r92 r58 into r98;
    ternary r63 r93 r59 into r99;
    ternary r63 r94 r60 into r100;
    ternary r63 r95 r61 into r101;
    ternary r63 r96 r62 into r102;
    gt r2[2u32] 0u64 into r103;
    is.eq r22[2u32] r3[2u32] into r104;
    mul r2[2u32] 2u64 into r105;
    add r97 r105 into r106;
    is.eq 2u8 0u8 into r107;
    not r107 into r108;
    is.eq 2u8 1u8 into r109;
    not r109 into r110;
    is.eq 2u8 2u8 into r111;
    not r111 into r112;
    is.eq 2u8 3u8 into r113;
    not r113 into r114;
    is.eq 2u8 4u8 into r115;
    ternary r115 true r102 into r116;
    ternary r113 true r101 into r117;
    ternary r113 r102 r116 into r118;
    ternary r111 true r100 into r119;
    ternary r111 r101 r117 into r120;
    ternary r111 r102 r118 into r121;
    ternary r109 true r99 into r122;
    ternary r109 r100 r119 into r123;
    ternary r109 r101 r120 into r124;
    ternary r109 r102 r121 into r125;
    ternary r107 true r98 into r126;
    ternary r107 r99 r122 into r127;
    ternary r107 r100 r123 into r128;
    ternary r107 r101 r124 into r129;
    ternary r107 r102 r125 into r130;
    ternary r104 r106 r97 into r131;
    ternary r104 r126 r98 into r132;
    ternary r104 r127 r99 into r133;
    ternary r104 r128 r100 into r134;
    ternary r104 r129 r101 into r135;
    ternary r104 r130 r102 into r136;
    ternary r103 r131 r97 into r137;
    ternary r103 r132 r98 into r138;
    ternary r103 r133 r99 into r139;
    ternary r103 r134 r100 into r140;
    ternary r103 r135 r101 into r141;
    ternary r103 r136 r102 into r142;
    gt r2[3u32] 0u64 into r143;
    is.eq r22[3u32] r3[3u32] into r144;
    mul r2[3u32] 2u64 into r145;
    add r137 r145 into r146;
    is.eq 3u8 0u8 into r147;
    not r147 into r148;
    is.eq 3u8 1u8 into r149;
    not r149 into r150;
    is.eq 3u8 2u8 into r151;
    not r151 into r152;
    is.eq 3u8 3u8 into r153;
    not r153 into r154;
    is.eq 3u8 4u8 into r155;
    ternary r155 true r142 into r156;
    ternary r153 true r141 into r157;
    ternary r153 r142 r156 into r158;
    ternary r151 true r140 into r159;
    ternary r151 r141 r157 into r160;
    ternary r151 r142 r158 into r161;
    ternary r149 true r139 into r162;
    ternary r149 r140 r159 into r163;
    ternary r149 r141 r160 into r164;
    ternary r149 r142 r161 into r165;
    ternary r147 true r138 into r166;
    ternary r147 r139 r162 into r167;
    ternary r147 r140 r163 into r168;
    ternary r147 r141 r164 into r169;
    ternary r147 r142 r165 into r170;
    ternary r144 r146 r137 into r171;
    ternary r144 r166 r138 into r172;
    ternary r144 r167 r139 into r173;
    ternary r144 r168 r140 into r174;
    ternary r144 r169 r141 into r175;
    ternary r144 r170 r142 into r176;
    ternary r143 r171 r137 into r177;
    ternary r143 r172 r138 into r178;
    ternary r143 r173 r139 into r179;
    ternary r143 r174 r140 into r180;
    ternary r143 r175 r141 into r181;
    ternary r143 r176 r142 into r182;
    gt r2[4u32] 0u64 into r183;
    is.eq r22[4u32] r3[4u32] into r184;
    mul r2[4u32] 2u64 into r185;
    add r177 r185 into r186;
    is.eq 4u8 0u8 into r187;
    not r187 into r188;
    is.eq 4u8 1u8 into r189;
    not r189 into r190;
    is.eq 4u8 2u8 into r191;
    not r191 into r192;
    is.eq 4u8 3u8 into r193;
    not r193 into r194;
    is.eq 4u8 4u8 into r195;
    ternary r195 true r182 into r196;
    ternary r193 true r181 into r197;
    ternary r193 r182 r196 into r198;
    ternary r191 true r180 into r199;
    ternary r191 r181 r197 into r200;
    ternary r191 r182 r198 into r201;
    ternary r189 true r179 into r202;
    ternary r189 r180 r199 into r203;
    ternary r189 r181 r200 into r204;
    ternary r189 r182 r201 into r205;
    ternary r187 true r178 into r206;
    ternary r187 r179 r202 into r207;
    ternary r187 r180 r203 into r208;
    ternary r187 r181 r204 into r209;
    ternary r187 r182 r205 into r210;
    ternary r184 r186 r177 into r211;
    ternary r184 r206 r178 into r212;
    ternary r184 r207 r179 into r213;
    ternary r184 r208 r180 into r214;
    ternary r184 r209 r181 into r215;
    ternary r184 r210 r182 into r216;
    ternary r183 r211 r177 into r217;
    ternary r183 r212 r178 into r218;
    ternary r183 r213 r179 into r219;
    ternary r183 r214 r180 into r220;
    ternary r183 r215 r181 into r221;
    ternary r183 r216 r182 into r222;
    cast  r218 r219 r220 r221 r222 into r223 as [boolean; 5u32];
    get.or_use user_balance[r16] 0u64 into r224;
    add r224 r217 into r225;
    set r225 into user_balance[r16];
    set r223 into user_streak[r16];

function bet_private_token:
    input r0 as token_registry.aleo/Token.record;
    input r1 as [u64; 5u32].private;
    input r2 as [boolean; 5u32].private;
    input r3 as field.private;
    add 0u64 r1[0u32] into r4;
    add r4 r1[1u32] into r5;
    add r5 r1[2u32] into r6;
    add r6 r1[3u32] into r7;
    add r7 r1[4u32] into r8;
    cast r8 into r9 as u128;
    call token_registry.aleo/transfer_private_to_public coinflip_aleo_zkworkshop_v1.aleo r9 r0 into r10 r11;
    cast self.caller r3 into r12 as TokenOwner;
    hash.bhp256 r12 into r13 as field;
    async bet_private_token r13 r8 r1 r2 r11 into r14;
    output r10 as token_registry.aleo/Token.record;
    output r14 as coinflip_aleo_zkworkshop_v1.aleo/bet_private_token.future;

finalize bet_private_token:
    input r0 as field.public;
    input r1 as u64.public;
    input r2 as [u64; 5u32].public;
    input r3 as [boolean; 5u32].public;
    input r4 as token_registry.aleo/transfer_private_to_public.future;
    await r4;
    get status[true] into r5;
    assert.eq r5 1u8;
    get amount_limit[true] into r6;
    lte r1 r6 into r7;
    assert.eq r7 true;
    get credits.aleo/account[coinflip_aleo_zkworkshop_v1.aleo] into r8;
    mul r1 2u64 into r9;
    gte r8 r9 into r10;
    assert.eq r10 true;
    rand.chacha into r11 as boolean;
    rand.chacha into r12 as boolean;
    rand.chacha into r13 as boolean;
    rand.chacha into r14 as boolean;
    rand.chacha into r15 as boolean;
    cast  r11 r12 r13 r14 r15 into r16 as [boolean; 5u32];
    gt r2[0u32] 0u64 into r17;
    is.eq r16[0u32] r3[0u32] into r18;
    mul r2[0u32] 2u64 into r19;
    add 0u64 r19 into r20;
    is.eq 0u8 0u8 into r21;
    not r21 into r22;
    is.eq 0u8 1u8 into r23;
    not r23 into r24;
    is.eq 0u8 2u8 into r25;
    not r25 into r26;
    is.eq 0u8 3u8 into r27;
    not r27 into r28;
    is.eq 0u8 4u8 into r29;
    ternary r29 true false into r30;
    ternary r27 true false into r31;
    ternary r27 false r30 into r32;
    ternary r25 true false into r33;
    ternary r25 false r31 into r34;
    ternary r25 false r32 into r35;
    ternary r23 true false into r36;
    ternary r23 false r33 into r37;
    ternary r23 false r34 into r38;
    ternary r23 false r35 into r39;
    ternary r21 true false into r40;
    ternary r21 false r36 into r41;
    ternary r21 false r37 into r42;
    ternary r21 false r38 into r43;
    ternary r21 false r39 into r44;
    ternary r18 r20 0u64 into r45;
    ternary r18 r40 false into r46;
    ternary r18 r41 false into r47;
    ternary r18 r42 false into r48;
    ternary r18 r43 false into r49;
    ternary r18 r44 false into r50;
    ternary r17 r45 0u64 into r51;
    ternary r17 r46 false into r52;
    ternary r17 r47 false into r53;
    ternary r17 r48 false into r54;
    ternary r17 r49 false into r55;
    ternary r17 r50 false into r56;
    gt r2[1u32] 0u64 into r57;
    is.eq r16[1u32] r3[1u32] into r58;
    mul r2[1u32] 2u64 into r59;
    add r51 r59 into r60;
    is.eq 1u8 0u8 into r61;
    not r61 into r62;
    is.eq 1u8 1u8 into r63;
    not r63 into r64;
    is.eq 1u8 2u8 into r65;
    not r65 into r66;
    is.eq 1u8 3u8 into r67;
    not r67 into r68;
    is.eq 1u8 4u8 into r69;
    ternary r69 true r56 into r70;
    ternary r67 true r55 into r71;
    ternary r67 r56 r70 into r72;
    ternary r65 true r54 into r73;
    ternary r65 r55 r71 into r74;
    ternary r65 r56 r72 into r75;
    ternary r63 true r53 into r76;
    ternary r63 r54 r73 into r77;
    ternary r63 r55 r74 into r78;
    ternary r63 r56 r75 into r79;
    ternary r61 true r52 into r80;
    ternary r61 r53 r76 into r81;
    ternary r61 r54 r77 into r82;
    ternary r61 r55 r78 into r83;
    ternary r61 r56 r79 into r84;
    ternary r58 r60 r51 into r85;
    ternary r58 r80 r52 into r86;
    ternary r58 r81 r53 into r87;
    ternary r58 r82 r54 into r88;
    ternary r58 r83 r55 into r89;
    ternary r58 r84 r56 into r90;
    ternary r57 r85 r51 into r91;
    ternary r57 r86 r52 into r92;
    ternary r57 r87 r53 into r93;
    ternary r57 r88 r54 into r94;
    ternary r57 r89 r55 into r95;
    ternary r57 r90 r56 into r96;
    gt r2[2u32] 0u64 into r97;
    is.eq r16[2u32] r3[2u32] into r98;
    mul r2[2u32] 2u64 into r99;
    add r91 r99 into r100;
    is.eq 2u8 0u8 into r101;
    not r101 into r102;
    is.eq 2u8 1u8 into r103;
    not r103 into r104;
    is.eq 2u8 2u8 into r105;
    not r105 into r106;
    is.eq 2u8 3u8 into r107;
    not r107 into r108;
    is.eq 2u8 4u8 into r109;
    ternary r109 true r96 into r110;
    ternary r107 true r95 into r111;
    ternary r107 r96 r110 into r112;
    ternary r105 true r94 into r113;
    ternary r105 r95 r111 into r114;
    ternary r105 r96 r112 into r115;
    ternary r103 true r93 into r116;
    ternary r103 r94 r113 into r117;
    ternary r103 r95 r114 into r118;
    ternary r103 r96 r115 into r119;
    ternary r101 true r92 into r120;
    ternary r101 r93 r116 into r121;
    ternary r101 r94 r117 into r122;
    ternary r101 r95 r118 into r123;
    ternary r101 r96 r119 into r124;
    ternary r98 r100 r91 into r125;
    ternary r98 r120 r92 into r126;
    ternary r98 r121 r93 into r127;
    ternary r98 r122 r94 into r128;
    ternary r98 r123 r95 into r129;
    ternary r98 r124 r96 into r130;
    ternary r97 r125 r91 into r131;
    ternary r97 r126 r92 into r132;
    ternary r97 r127 r93 into r133;
    ternary r97 r128 r94 into r134;
    ternary r97 r129 r95 into r135;
    ternary r97 r130 r96 into r136;
    gt r2[3u32] 0u64 into r137;
    is.eq r16[3u32] r3[3u32] into r138;
    mul r2[3u32] 2u64 into r139;
    add r131 r139 into r140;
    is.eq 3u8 0u8 into r141;
    not r141 into r142;
    is.eq 3u8 1u8 into r143;
    not r143 into r144;
    is.eq 3u8 2u8 into r145;
    not r145 into r146;
    is.eq 3u8 3u8 into r147;
    not r147 into r148;
    is.eq 3u8 4u8 into r149;
    ternary r149 true r136 into r150;
    ternary r147 true r135 into r151;
    ternary r147 r136 r150 into r152;
    ternary r145 true r134 into r153;
    ternary r145 r135 r151 into r154;
    ternary r145 r136 r152 into r155;
    ternary r143 true r133 into r156;
    ternary r143 r134 r153 into r157;
    ternary r143 r135 r154 into r158;
    ternary r143 r136 r155 into r159;
    ternary r141 true r132 into r160;
    ternary r141 r133 r156 into r161;
    ternary r141 r134 r157 into r162;
    ternary r141 r135 r158 into r163;
    ternary r141 r136 r159 into r164;
    ternary r138 r140 r131 into r165;
    ternary r138 r160 r132 into r166;
    ternary r138 r161 r133 into r167;
    ternary r138 r162 r134 into r168;
    ternary r138 r163 r135 into r169;
    ternary r138 r164 r136 into r170;
    ternary r137 r165 r131 into r171;
    ternary r137 r166 r132 into r172;
    ternary r137 r167 r133 into r173;
    ternary r137 r168 r134 into r174;
    ternary r137 r169 r135 into r175;
    ternary r137 r170 r136 into r176;
    gt r2[4u32] 0u64 into r177;
    is.eq r16[4u32] r3[4u32] into r178;
    mul r2[4u32] 2u64 into r179;
    add r171 r179 into r180;
    is.eq 4u8 0u8 into r181;
    not r181 into r182;
    is.eq 4u8 1u8 into r183;
    not r183 into r184;
    is.eq 4u8 2u8 into r185;
    not r185 into r186;
    is.eq 4u8 3u8 into r187;
    not r187 into r188;
    is.eq 4u8 4u8 into r189;
    ternary r189 true r176 into r190;
    ternary r187 true r175 into r191;
    ternary r187 r176 r190 into r192;
    ternary r185 true r174 into r193;
    ternary r185 r175 r191 into r194;
    ternary r185 r176 r192 into r195;
    ternary r183 true r173 into r196;
    ternary r183 r174 r193 into r197;
    ternary r183 r175 r194 into r198;
    ternary r183 r176 r195 into r199;
    ternary r181 true r172 into r200;
    ternary r181 r173 r196 into r201;
    ternary r181 r174 r197 into r202;
    ternary r181 r175 r198 into r203;
    ternary r181 r176 r199 into r204;
    ternary r178 r180 r171 into r205;
    ternary r178 r200 r172 into r206;
    ternary r178 r201 r173 into r207;
    ternary r178 r202 r174 into r208;
    ternary r178 r203 r175 into r209;
    ternary r178 r204 r176 into r210;
    ternary r177 r205 r171 into r211;
    ternary r177 r206 r172 into r212;
    ternary r177 r207 r173 into r213;
    ternary r177 r208 r174 into r214;
    ternary r177 r209 r175 into r215;
    ternary r177 r210 r176 into r216;
    cast  r212 r213 r214 r215 r216 into r217 as [boolean; 5u32];
    get.or_use user_balance[r0] 0u64 into r218;
    add r218 r211 into r219;
    set r219 into user_balance[r0];
    set r217 into user_streak[r0];

function bet_ingame:
    input r0 as [u64; 5u32].private;
    input r1 as [boolean; 5u32].private;
    add 0u64 r0[0u32] into r2;
    add r2 r0[1u32] into r3;
    add r3 r0[2u32] into r4;
    add r4 r0[3u32] into r5;
    add r5 r0[4u32] into r6;
    async bet_ingame self.caller r6 r0 r1 11111111111111111111field into r7;
    output r7 as coinflip_aleo_zkworkshop_v1.aleo/bet_ingame.future;

finalize bet_ingame:
    input r0 as address.public;
    input r1 as u64.public;
    input r2 as [u64; 5u32].public;
    input r3 as [boolean; 5u32].public;
    input r4 as field.public;
    get status[true] into r5;
    assert.eq r5 1u8;
    get amount_limit[true] into r6;
    lte r1 r6 into r7;
    assert.eq r7 true;
    get credits.aleo/account[coinflip_aleo_zkworkshop_v1.aleo] into r8;
    mul r1 2u64 into r9;
    gte r8 r9 into r10;
    assert.eq r10 true;
    cast r0 r4 into r11 as TokenOwner;
    hash.bhp256 r11 into r12 as field;
    rand.chacha into r13 as boolean;
    rand.chacha into r14 as boolean;
    rand.chacha into r15 as boolean;
    rand.chacha into r16 as boolean;
    rand.chacha into r17 as boolean;
    cast  r13 r14 r15 r16 r17 into r18 as [boolean; 5u32];
    gt r2[0u32] 0u64 into r19;
    is.eq r18[0u32] r3[0u32] into r20;
    mul r2[0u32] 2u64 into r21;
    add 0u64 r21 into r22;
    is.eq 0u8 0u8 into r23;
    not r23 into r24;
    is.eq 0u8 1u8 into r25;
    not r25 into r26;
    is.eq 0u8 2u8 into r27;
    not r27 into r28;
    is.eq 0u8 3u8 into r29;
    not r29 into r30;
    is.eq 0u8 4u8 into r31;
    ternary r31 true false into r32;
    ternary r29 true false into r33;
    ternary r29 false r32 into r34;
    ternary r27 true false into r35;
    ternary r27 false r33 into r36;
    ternary r27 false r34 into r37;
    ternary r25 true false into r38;
    ternary r25 false r35 into r39;
    ternary r25 false r36 into r40;
    ternary r25 false r37 into r41;
    ternary r23 true false into r42;
    ternary r23 false r38 into r43;
    ternary r23 false r39 into r44;
    ternary r23 false r40 into r45;
    ternary r23 false r41 into r46;
    ternary r20 r22 0u64 into r47;
    ternary r20 r42 false into r48;
    ternary r20 r43 false into r49;
    ternary r20 r44 false into r50;
    ternary r20 r45 false into r51;
    ternary r20 r46 false into r52;
    ternary r19 r47 0u64 into r53;
    ternary r19 r48 false into r54;
    ternary r19 r49 false into r55;
    ternary r19 r50 false into r56;
    ternary r19 r51 false into r57;
    ternary r19 r52 false into r58;
    gt r2[1u32] 0u64 into r59;
    is.eq r18[1u32] r3[1u32] into r60;
    mul r2[1u32] 2u64 into r61;
    add r53 r61 into r62;
    is.eq 1u8 0u8 into r63;
    not r63 into r64;
    is.eq 1u8 1u8 into r65;
    not r65 into r66;
    is.eq 1u8 2u8 into r67;
    not r67 into r68;
    is.eq 1u8 3u8 into r69;
    not r69 into r70;
    is.eq 1u8 4u8 into r71;
    ternary r71 true r58 into r72;
    ternary r69 true r57 into r73;
    ternary r69 r58 r72 into r74;
    ternary r67 true r56 into r75;
    ternary r67 r57 r73 into r76;
    ternary r67 r58 r74 into r77;
    ternary r65 true r55 into r78;
    ternary r65 r56 r75 into r79;
    ternary r65 r57 r76 into r80;
    ternary r65 r58 r77 into r81;
    ternary r63 true r54 into r82;
    ternary r63 r55 r78 into r83;
    ternary r63 r56 r79 into r84;
    ternary r63 r57 r80 into r85;
    ternary r63 r58 r81 into r86;
    ternary r60 r62 r53 into r87;
    ternary r60 r82 r54 into r88;
    ternary r60 r83 r55 into r89;
    ternary r60 r84 r56 into r90;
    ternary r60 r85 r57 into r91;
    ternary r60 r86 r58 into r92;
    ternary r59 r87 r53 into r93;
    ternary r59 r88 r54 into r94;
    ternary r59 r89 r55 into r95;
    ternary r59 r90 r56 into r96;
    ternary r59 r91 r57 into r97;
    ternary r59 r92 r58 into r98;
    gt r2[2u32] 0u64 into r99;
    is.eq r18[2u32] r3[2u32] into r100;
    mul r2[2u32] 2u64 into r101;
    add r93 r101 into r102;
    is.eq 2u8 0u8 into r103;
    not r103 into r104;
    is.eq 2u8 1u8 into r105;
    not r105 into r106;
    is.eq 2u8 2u8 into r107;
    not r107 into r108;
    is.eq 2u8 3u8 into r109;
    not r109 into r110;
    is.eq 2u8 4u8 into r111;
    ternary r111 true r98 into r112;
    ternary r109 true r97 into r113;
    ternary r109 r98 r112 into r114;
    ternary r107 true r96 into r115;
    ternary r107 r97 r113 into r116;
    ternary r107 r98 r114 into r117;
    ternary r105 true r95 into r118;
    ternary r105 r96 r115 into r119;
    ternary r105 r97 r116 into r120;
    ternary r105 r98 r117 into r121;
    ternary r103 true r94 into r122;
    ternary r103 r95 r118 into r123;
    ternary r103 r96 r119 into r124;
    ternary r103 r97 r120 into r125;
    ternary r103 r98 r121 into r126;
    ternary r100 r102 r93 into r127;
    ternary r100 r122 r94 into r128;
    ternary r100 r123 r95 into r129;
    ternary r100 r124 r96 into r130;
    ternary r100 r125 r97 into r131;
    ternary r100 r126 r98 into r132;
    ternary r99 r127 r93 into r133;
    ternary r99 r128 r94 into r134;
    ternary r99 r129 r95 into r135;
    ternary r99 r130 r96 into r136;
    ternary r99 r131 r97 into r137;
    ternary r99 r132 r98 into r138;
    gt r2[3u32] 0u64 into r139;
    is.eq r18[3u32] r3[3u32] into r140;
    mul r2[3u32] 2u64 into r141;
    add r133 r141 into r142;
    is.eq 3u8 0u8 into r143;
    not r143 into r144;
    is.eq 3u8 1u8 into r145;
    not r145 into r146;
    is.eq 3u8 2u8 into r147;
    not r147 into r148;
    is.eq 3u8 3u8 into r149;
    not r149 into r150;
    is.eq 3u8 4u8 into r151;
    ternary r151 true r138 into r152;
    ternary r149 true r137 into r153;
    ternary r149 r138 r152 into r154;
    ternary r147 true r136 into r155;
    ternary r147 r137 r153 into r156;
    ternary r147 r138 r154 into r157;
    ternary r145 true r135 into r158;
    ternary r145 r136 r155 into r159;
    ternary r145 r137 r156 into r160;
    ternary r145 r138 r157 into r161;
    ternary r143 true r134 into r162;
    ternary r143 r135 r158 into r163;
    ternary r143 r136 r159 into r164;
    ternary r143 r137 r160 into r165;
    ternary r143 r138 r161 into r166;
    ternary r140 r142 r133 into r167;
    ternary r140 r162 r134 into r168;
    ternary r140 r163 r135 into r169;
    ternary r140 r164 r136 into r170;
    ternary r140 r165 r137 into r171;
    ternary r140 r166 r138 into r172;
    ternary r139 r167 r133 into r173;
    ternary r139 r168 r134 into r174;
    ternary r139 r169 r135 into r175;
    ternary r139 r170 r136 into r176;
    ternary r139 r171 r137 into r177;
    ternary r139 r172 r138 into r178;
    gt r2[4u32] 0u64 into r179;
    is.eq r18[4u32] r3[4u32] into r180;
    mul r2[4u32] 2u64 into r181;
    add r173 r181 into r182;
    is.eq 4u8 0u8 into r183;
    not r183 into r184;
    is.eq 4u8 1u8 into r185;
    not r185 into r186;
    is.eq 4u8 2u8 into r187;
    not r187 into r188;
    is.eq 4u8 3u8 into r189;
    not r189 into r190;
    is.eq 4u8 4u8 into r191;
    ternary r191 true r178 into r192;
    ternary r189 true r177 into r193;
    ternary r189 r178 r192 into r194;
    ternary r187 true r176 into r195;
    ternary r187 r177 r193 into r196;
    ternary r187 r178 r194 into r197;
    ternary r185 true r175 into r198;
    ternary r185 r176 r195 into r199;
    ternary r185 r177 r196 into r200;
    ternary r185 r178 r197 into r201;
    ternary r183 true r174 into r202;
    ternary r183 r175 r198 into r203;
    ternary r183 r176 r199 into r204;
    ternary r183 r177 r200 into r205;
    ternary r183 r178 r201 into r206;
    ternary r180 r182 r173 into r207;
    ternary r180 r202 r174 into r208;
    ternary r180 r203 r175 into r209;
    ternary r180 r204 r176 into r210;
    ternary r180 r205 r177 into r211;
    ternary r180 r206 r178 into r212;
    ternary r179 r207 r173 into r213;
    ternary r179 r208 r174 into r214;
    ternary r179 r209 r175 into r215;
    ternary r179 r210 r176 into r216;
    ternary r179 r211 r177 into r217;
    ternary r179 r212 r178 into r218;
    cast  r214 r215 r216 r217 r218 into r219 as [boolean; 5u32];
    get.or_use user_balance[r12] 0u64 into r220;
    add r220 r213 into r221;
    set r221 into user_balance[r12];
    set r219 into user_streak[r12];

function unpause:
    async unpause self.caller into r0;
    output r0 as coinflip_aleo_zkworkshop_v1.aleo/unpause.future;

finalize unpause:
    input r0 as address.public;
    get admin[true] into r1;
    assert.eq r0 r1;
    set 1u8 into status[true];

function pause:
    async pause self.caller into r0;
    output r0 as coinflip_aleo_zkworkshop_v1.aleo/pause.future;

finalize pause:
    input r0 as address.public;
    get admin[true] into r1;
    assert.eq r0 r1;
    set 0u8 into status[true];

function change_limit:
    input r0 as u64.private;
    async change_limit self.caller r0 into r1;
    output r1 as coinflip_aleo_zkworkshop_v1.aleo/change_limit.future;

finalize change_limit:
    input r0 as address.public;
    input r1 as u64.public;
    get admin[true] into r2;
    assert.eq r0 r2;
    set r1 into amount_limit[true];

function withdraw:
    input r0 as u64.private;
    call credits.aleo/transfer_public self.caller r0 into r1;
    async withdraw r0 self.caller r1 into r2;
    output r2 as coinflip_aleo_zkworkshop_v1.aleo/withdraw.future;

finalize withdraw:
    input r0 as u64.public;
    input r1 as address.public;
    input r2 as credits.aleo/transfer_public.future;
    await r2;
    get admin[true] into r3;
    assert.eq r1 r3;
